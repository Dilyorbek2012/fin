import json
import uuid
from datetime import datetime, timedelta
import asyncio
from pathlib import Path

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

REMINDERS_FILE = Path("reminders.json")


def load_reminders():
    if not REMINDERS_FILE.exists():
        return []
    with REMINDERS_FILE.open("r", encoding="utf-8") as f:
        return json.load(f)


def save_reminders(reminders):
    with REMINDERS_FILE.open("w", encoding="utf-8") as f:
        json.dump(reminders, f, ensure_ascii=False, indent=2)


def parse_datetime_from_text(date_part: str, time_part: str) -> datetime:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç:
      dd.mm.YYYY HH:MM
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime.
    """
    return datetime.strptime(f"{date_part} {time_part}", "%d.%m.%Y %H:%M")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`18.10.2025 15:00 –í—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–∑—å—è–º–∏`\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/cancel <id> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä: `18.10.2025 15:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ`",
        parse_mode="Markdown"
    )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)


async def schedule_job(application, reminder):
    """
    reminder: dict {id, chat_id, time_iso, text}
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á—É (Job) –≤ JobQueue –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    remind_time = datetime.fromisoformat(reminder["time_iso"])
    delay = (remind_time - datetime.now()).total_seconds()
    if delay <= 0:
        # –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Ä–∞–∑—É (–≤ —Ñ–æ–Ω–µ)
        await application.bot.send_message(
            chat_id=reminder["chat_id"],
            text=f"üîî (–ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è) –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['text']}"
        )
        # –∏ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –¥–∞–ª–µ–µ; —É–¥–∞–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ/—Å–ø–∏—Å–∫–µ
        return

    # job callback
    async def job_callback(context: ContextTypes.DEFAULT_TYPE):
        try:
            await context.bot.send_message(
                chat_id=reminder["chat_id"],
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['text']}"
            )
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", e)

        # –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–¥–∞–ª—è–µ–º –∏–∑ —Ñ–∞–π–ª–∞ (persist)
        reminders = load_reminders()
        reminders = [r for r in reminders if r["id"] != reminder["id"]]
        save_reminders(reminders)

    # schedule
    application.job_queue.run_once(job_callback, when=delay)


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    # –æ–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º: date time message
    # split –Ω–∞ 3 —á–∞—Å—Ç–∏: date, time, rest
    parts = text.split(" ", 2)
    if len(parts) < 2:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `dd.mm.YYYY HH:MM —Ç–µ–∫—Å—Ç`",
            parse_mode="Markdown"
        )
        return

    date_part = parts[0]
    time_part = parts[1]
    reminder_text = parts[2] if len(parts) > 2 else "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

    try:
        remind_dt = parse_datetime_from_text(date_part, time_part)
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è `dd.mm.YYYY HH:MM`.\n"
            "–ü—Ä–∏–º–µ—Ä: `18.10.2025 15:00 –≤—Å—Ç—Ä–µ—á–∞`",
            parse_mode="Markdown"
        )
        return

    if (remind_dt - datetime.now()).total_seconds() <= 0:
        await update.message.reply_text("‚ùó –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ ‚Äî —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.")
        return

    # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
    reminder_id = str(uuid.uuid4())[:8]
    reminder = {
        "id": reminder_id,
        "chat_id": update.message.chat_id,
        "time_iso": remind_dt.isoformat(),
        "text": reminder_text,
    }

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
    reminders = load_reminders()
    reminders.append(reminder)
    save_reminders(reminders)

    # –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    await schedule_job(context.application, reminder)

    await update.message.reply_text(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\nID: `{reminder_id}`\n"
        f"–í—Ä–µ–º—è: {remind_dt.strftime('%d.%m.%Y %H:%M')}\n–¢–µ–∫—Å—Ç: {reminder_text}",
        parse_mode="Markdown"
    )


async def list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    reminders = load_reminders()
    user_reminders = [r for r in reminders if r["chat_id"] == chat_id]
    if not user_reminders:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    lines = []
    for r in user_reminders:
        dt = datetime.fromisoformat(r["time_iso"])
        lines.append(f"ID: `{r['id']}` ‚Äî {dt.strftime('%d.%m.%Y %H:%M')} ‚Äî {r['text']}")
    await update.message.reply_text("\n".join(lines), parse_mode="Markdown")


async def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = update.message.text.split()
    if len(parts) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel <id>")
        return
    rid = parts[1].strip()

    reminders = load_reminders()
    before_count = len(reminders)
    reminders = [r for r in reminders if not (r["id"] == rid and r["chat_id"] == update.message.chat_id)]
    after_count = len(reminders)

    if before_count == after_count:
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID).")
        return

    save_reminders(reminders)
    await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ `{rid}` —É–¥–∞–ª–µ–Ω–æ.", parse_mode="Markdown")


async def on_startup(application):
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
    reminders = load_reminders()
    # –ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
    count = 0
    for r in reminders:
        try:
            remind_time = datetime.fromisoformat(r["time_iso"])
        except Exception:
            continue
        if (remind_time - datetime.now()).total_seconds() > 0:
            # schedule
            await schedule_job(application, r)
            count += 1
    print(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")


def main():
    import os
    TOKEN = os.environ.get("TG_BOT_TOKEN") or "8362070525:AAHSZQDqJo3LhVS2rZ05UCvywQGxHyqdFpM"
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("list", list_cmd))
    app.add_handler(CommandHandler("cancel", cancel_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    # startup tasks: –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    app.post_init = on_startup

    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app.run_polling()


if __name__ == "__main__":
    main()

