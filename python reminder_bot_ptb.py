import json
import uuid
from datetime import datetime
from pathlib import Path
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

REMINDERS_FILE = Path("reminders.json")

def load_reminders():
    if not REMINDERS_FILE.exists():
        return []
    with REMINDERS_FILE.open("r", encoding="utf-8") as f:
        return json.load(f)

def save_reminders(reminders):
    with REMINDERS_FILE.open("w", encoding="utf-8") as f:
        json.dump(reminders, f, ensure_ascii=False, indent=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ ü§ñ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`18.10.2025 15:00 –í—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–∑—å—è–º–∏`\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/cancel <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n",
        parse_mode="Markdown"
    )

async def list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    reminders = [r for r in load_reminders() if r["chat_id"] == chat_id]
    if not reminders:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    lines = [
        f"üÜî `{r['id']}` ‚Äî {datetime.fromisoformat(r['time']).strftime('%d.%m.%Y %H:%M')} ‚Äî {r['text']}"
        for r in reminders
    ]
    await update.message.reply_text("\n".join(lines), parse_mode="Markdown")

async def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = update.message.text.split()
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel <id>")
        return
    rid = args[1]
    reminders = load_reminders()
    reminders = [r for r in reminders if r["id"] != rid]
    save_reminders(reminders)
    await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {rid} —É–¥–∞–ª–µ–Ω–æ.")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    parts = text.split(" ", 2)
    if len(parts) < 3:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: `–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º —Ç–µ–∫—Å—Ç`", parse_mode="Markdown")
        return
    date_str, time_str, reminder_text = parts
    try:
        remind_time = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.")
        return
    if remind_time < datetime.now():
        await update.message.reply_text("‚è∞ –£–∫–∞–∂–∏ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è!")
        return
    reminder_id = str(uuid.uuid4())[:8]
    reminder = {
        "id": reminder_id,
        "chat_id": update.message.chat_id,
        "time": remind_time.isoformat(),
        "text": reminder_text
    }
    reminders = load_reminders()
    reminders.append(reminder)
    save_reminders(reminders)
    await update.message.reply_text(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nID: `{reminder_id}`\n–í—Ä–µ–º—è: {date_str} {time_str}\n–¢–µ–∫—Å—Ç: {reminder_text}",
        parse_mode="Markdown"
    )

async def send_due_reminders(app):
    while True:
        reminders = load_reminders()
        now = datetime.now()
        to_send = [r for r in reminders if datetime.fromisoformat(r["time"]) <= now]
        for r in to_send:
            try:
                await app.bot.send_message(chat_id=r["chat_id"], text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {r['text']}")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", e)
            reminders = [x for x in reminders if x["id"] != r["id"]]
            save_reminders(reminders)
        await asyncio.sleep(60)

import asyncio
import os

async def main():
    TOKEN = os.environ.get("TG_BOT_TOKEN") or "8362070525:AAHSZQDqJo3LhVS2rZ05UCvywQGxHyqdFpM"
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_cmd))
    app.add_handler(CommandHandler("cancel", cancel_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    asyncio.create_task(send_due_reminders(app))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
